package com.example.OnlineRecruitment.Entities.Generators;

import java.io.Serializable;

import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.IdentifierGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import com.example.OnlineRecruitment.Entities.Role;


import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Persistence;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import jakarta.transaction.Transactional;

@Component
public class CustomIdGenerator implements IdentifierGenerator{


   EntityManagerFactory emf = Persistence.createEntityManagerFactory("Role");
   EntityManager em = emf.createEntityManager();
   EntityTransaction entityTransaction = em.getTransaction();

   
	@Override
	public Serializable generate(SharedSessionContractImplementor session, Object object){
		// TODO Auto-generated method stub
    	String prefix = "";
        if (object instanceof Role) {
            Role role = (Role) object;
            if ("Gradute".equals(role.getRoleTitle())) {
                prefix = "Gradute";
                System.out.println("this is graduate");
            } else if ("Employer".equals(role.getRoleTitle())) {
                prefix = "EMP";
                System.out.println("this is empl");
            }
            
       System.out.println(em);
        
       Query q = em.createQuery("SELECT COUNT(r) FROM Role r WHERE r.roleId LIKE :prefix");
           q.setParameter("prefix", prefix + "%");
       
       System.out.print(q); 
      
       int count = q.getFirstResult();
       System.out.print(count); 
        
        
        Long nextNumber = (count == 0) ? 1l : (count + 1);
        
        // Construct the custom ID
        return prefix + String.format("%04d", nextNumber);
        }
        throw new IllegalArgumentException("Object is not of type Role");
	}


}
